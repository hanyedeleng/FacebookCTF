Reversing - Screts of Reverse Engineering

The idea is simple: we should develop a solid understanding of low-level
software, and learn tecniques that will allow us to easily dig into any
program's binaries and retrieve information.

It's deconstructed
similar to scientific research that studies natural phenomena.

In some cases source code is available but the original developers who created
it are unavailable. This book deals specifically with what is commonly referred
to as binary reverse engineering.

Binary reverse engineering techqiues aim at extracting valuable information
from programs for which source code is unavailable.

Reverse engineering is often platform-specific. It is affected by the specific
operating system and hardware platform used. The primary operating system used
throughtout this book is Microsoft Windows, and for a good reason. Windows is
the most popular reverse engineering environment, and not only because it is
the most popular operating system in general.
It's lovely opensource alternative Linux, for example, is far less relevant
from a reversing standpoint precisely because the operating system and most of
the software that runs on top of it are open-source.

http://www.wiley.com/go/eeilam


Chapter 1 Foundations
connection between low-level software and reverse engineering

Reverse engineering is the process of extracting the knowledge or design
blueprints from anything man-made.
It is very similar to scientific research, in which a researcher is attempting
to work out the "blueprint" of the atom or the human mind.
"man made" vs "natural phenomenon"

Jusk like software engineering, software reverse engineering is a purely
virtual process, involving only a CPU, and the human mind.

The only prerequisite is a strong curiosity and desire to learn.

Software reverse engineering integrates several arts: code breaking, puzzle
solving, programming, and logical analysis.

Reversing Applications:
Common applications of reverse engineering in the software world: two
categories:
1. securty-related
2. software development-related.

Reversing is related to several different aspects of computer security. For
example, reversing has been employed in encryption research - a researcher
reverse an encrytion product and evaluates the level of security it provides.

Security-Related Reversing
Malicious Software
Reversing Cryptographic Algorithms

Cryptographic algorithms can be roughly divided into two groups:restricted
algorithms and key-based algorithms.
Restricted algorithms are the kind some kis play with; writing a letter to a
friend with each letter shifted several letters up or down. The secret in
restricted algorithms is the algorithm itself.
Restricted algorithms provide very poor security because reversing makes it
very difficult to maintain the secrecy of the algorithm. Once reversers get
their hand on the encrypting or decrypting program, it is only a matter of time
before the algorithm is exposed. Because the algorithm is the secret, reversing
can be seen as a way to break the algorithm

On the other hand, in key-based algorithms, the scret is a key, some numeric
value that is used by the algorithm to encrypt and decrypt the message. 
In key-based algorithms users encrpt messages using keys that are kept private.
The algorithms are usually made public, and the keys are kept private (and
sometimes divulged to the legitmate recipient, depending on the algorithm).
This almost makes reversing pointless because the algorithm is already known.
Inorder to decipher a message encrypted with a key-based cipher, you would have
to either:
1. Obtain the key
2. Try all possible combinations until you get to the key
3. Look for a flaw in the algorithm that can be employed to extract the key or
the original message.

Digital Rights Management
Auditing Program Binaries

Reversing in Software Development
Reversing can be incredibly useful to software developers. For instance,
software developers can employ reversing techniques to discover how to
interoperate with undocumented or partially documented software. In other
cases, reversing can be used to determine the quality of third-party code, such
as code libaray or even an operating system. Finally, it is sometimes possible
to use reversing techniques for extracting valuable information from a
competitor's product for the purpose of improving your own technologies.

Achieving Interoperability with Proprietary Software
Evaluating Software Quality and Robustness


Low-Level Software
Also known as system software is a generic name for the infrastruture of the
software world.
It encompasses development tools such as compilers, linkers, and debuggers,
infrastructure software such as operating system, and low-level programming
languages such as assembly language. It is the layer that isolates software
developers and application programs from the physical hardware. The development
tools isolate software developers from processor architectures and assembly
languages, while operating systems isolate software developers from specific
hardware devices and simplify the interaction with the end user by managing the
display, the mouse, the keyboard, and so on.

Nowadays, modern operating systems and development tools aim at isolating us
from the details of the low-level world. This greatly simplifies the process of
software development, but comes at the cost of reduced power and control over
the system.

In order to become an accomplished reverse engineer, you must develop a solid
understanding of low-level software and low-level programming. That's because
the low-level aspects of a program are often the only thing you have to work
with as a reverser-high-level details are almost alwasy eliminated before a
software program is shipped to customers. Mastering low-level software and the
various software-engineering concepts is just as important as mastering the
actual reversing techniques if one is to become an accomplished reverser.

What exactly is low-level software? Computers and software are built layers
upon layers. At the bottom layer, there are millions of microscopic transistors
pulsating at incomprehensible speeds. At the top layer, there are some elegant
looking graphics, a keyboard, and a mouse- the user experience. Most software
developers use high-level languages that take easily understandable commands
and execute them. For instance, commands that create a window, load a Web page,
or display a picture are incredibly high-level, meaning that they translate to
thoussands or even millions of commands in the lower layer.

Reversing requires a solid understanding of these lower layers. Reversers must
literally be aware of anything that comes between the program source code and
the CPU.

Assembly Language
Assembly language is the lowest level in the software chain, which makes it
incredibly suitable for reversing - nothing moves without it. If software
performs an operation, it must be visible in the assembly language code.
Assembly language is the language of reversing.
Machine code (often called binary code, or object code). People sometimes make
the mistake of thinking that machine code is "faster" or "lower-level" than
assembly language. That is a misconception: machine code and assembly language
are two different representations of the same thing. A CPU reads machine code,
which is nothing but sequences of bits that contain a list of instructions for
the CPU to perform. Assembly language is simply a textual representation of
those bits-we name elements in these code sequences in order to make them
human-readable. Insted of cryptic hexadecimal numbers we can look at textual
instruction names such as MOV, XCHG, and so on.

Each assembly language command is represented by a number, called the operation
code, or opcode. Object code is essentially a sequence of opcodes and other
numbers used in connection with the opcodes to perform operations.
CPU constantly read object code from memory, decode it, and act based on the
instructions embedded in it. When developers write code in assembly language,
they use an assembler program to translate the textual assembly language code
into binary code, which can be decoded by a CPU. In the other direction and
more relevant to our narrative, a disassmbler does the exact opposite. It reads
object code and generates the textual mapping of each instruction in it. This
is relatively simple operation to perform bacause the textural seembly language
is simply a different representation of the object code. Disassemblers are a
key tool for reversers and are discussed in more depth later in this chaper.

Intel IA-32 architecture, on which every 32-bit PC is baesd.



Compilers
A compiler is a program that takes a source file and generates a corresponding
machine code file. Depending on the high-level language, this machine code can
either be a standard platform-specific object code that is decoded directly by
the CPU or it can be encoded in a special platform-independent format called
bytecode.
Compilers of traditional programming languages such as C and C++ directly
generate machine-readable object code from the textual source code. What this
means is that the resulting object code, when translated to assembly language
by a disassembler, is essentially a machine-generated assembly language
program. Of course, it it not entirely machine-generated, becasue the software
developer described to the compiler what needed to be done in the high-level
language. But the details of how things are carried out are taken care of by
the compiler, in the resulting object code. This is an important point because
this code is not always easily understandable, even when compred to a
human-made assembly language program--machines think differently than human
beings.
The biggest hurdle in deciphering compiler-generated code is the optimizations
applied by most modern compilers. Compilers employ a variety techniques that
minimize code size and improve execution performance. The problem is that the
resulting optimized code is often counterintuitive and difficult to read. For
instance, optimizing compilers often replace straightforward instructions with
mathematically equivalent operations whose purpose can be far from obvious at
first glance.

Virtual Machines and Bytecodes
Compilers for high-level languages such as Java generate a bytecode instead of
an object code. Bytecodes are similar to object codes, except that they are
usually decoded by a program, instead of a CPU. The idea is to have a compiler
generate the bytecode, and to then use a program called a virtual machine to
decode the bytecode and perform the operations described in it. Of course, the
virtual machine itself must at some point convert the bytecode into standard
object code that is compatible with the underlying CPU.
Platform independence.

Operating Systems
An operating system is a program that manages the computer, including the
hardware and software applications. An operating system takes care of many
different tasks and can be seen as a kind of coordinator between the different
elements in a computer. Operating systems are such a key element in a computer
that any reverse must have a good understanding of what they do and how they
work. As we'll see later on, many reversing techniques revolve around the
operating system because the operating system serves as a gatekeeper that
controls the link between applications and the outside world.


The Reversing Process
For starters, I usually try to divide reversing sessions into two separate
phases. The first, which is really a kind of large-scale observation of the
earlier program, is called system-level reversing. System-level reversing
techniques help determine the general structure of the program and sometimes
even locate areas of interest within it. Once you establish a general
understanding of the layout of the program and determine areas of special
interest within it you can proceed to more in-depth work using code-level
reversing techniques. Code-level techniques provide detailed information on a
selected code chunk. 

System-Level Reversing

Code-Level Reversing

The Tools:
Reversing is all about the tools. 
System-Monitoring Tools
Disassemblers
Debuggers
Decompilers
    A decompiler takes an executable binary file and attempts to produce
    readable high-level language code from it. The idea is to try and revers
    the compilation process, to obtain the original source file or something
    similar to it.

Interoperability
Getting two programs to communicate and interoperate is never an easy task.
Even within a single product developed by a single group of people, there are
frequently interfacing issues caused when attempting to get individual
componets to interoperate. 


Chapter 2 Low-level Software
Critical aspect of the field of reverse engineering

Registers:
IA-32 has eight generic registers: EAX, EBX, ECX, EDX, ESI, EDI, EBP, ESP.

Notice that all of these names start with the letter E, which stands for
extended. These register names have been carried over from the older 16-bit
Intel architecture, where they had the exact same names, minus the Es (so that
EAX was called AX, etc.). This is important because sometimes you'll run into
32-bit code that references registers in that way: MOV AX, 0x1000, and so on.

            Generic IA-32 Registers and Their Descriptions
EAX, EBX, EDX               These are generic registers that can be used for
                            any integer, Boolean, logical, or memory operation.

ECX                         Generic, sometimes used as a counter by repetitive
                            instructions that require counting.

ESI/ED                      Generic, freqently used as source/destination
                            pointers in instructions that copy memory (SI
                            stands for source index, and DI stands for
                            destination index).

EBP                         Can be used as a generic register, but is mostly
                            used as the stack base pointer. Using a base
                            pointer in combination with the stack pointer
                            creates a stack frame. A stack frame can be defined
                            as the current fuction's stack zone, which resides
                            between the stack pointer (ESP) and there base
                            pointer (EBP). The base pointer usually points to
                            the stack position right after the return address
                            for the current fuction. Stack frames are used for
                            gaining quick and convenient access to both local
                            varable and to the prameters passed to the current
                            function.

ESP                         This is the CPUs stack pointer. The stack pointer
                            stores the current position in the stack, so that
                            anything pushed to the stack gets pushed below this
                            address, and this register is updated accordingly.



Instruction Format
The basic layout of IA-32 instructions.
Instructions usually consit of an opcode (operation code), and one or two
operands. The opcode is an instruction name such as MOV, and the operands are
the "parameters" that the instruction receives (some instructions have no
operands). Naturally, each instruction requires different operands because
they each perform a different task. Operands represent data that is handled by
the specific instruction (just like parameters passed to a function), and in
assembly language, data comes in three basic forms:
Register name: the name of a general-purpose register to be read from or
written to. In IA-32, this would be something like EAX, EBX, and so on.

Immediate: A constant value embedded right in the code. This often indicates
that there was some kind of hard-coded constant in the original program.

Memory address: WHen an operand resides in RAM, its memory address is enclosed
in brackets to indicates that it is a memory address.

The general instrucion format looks like this:
Instruction Name (opcode)       Destination Operand, Source Operand


Operand             Description
EAX                 Simply references EAX, either for reading or writing
0x30004040          An immediate number embedded in the code (like a constant)
[0x4000349e]        An immediate hard-coded memory address- this can be a
                    global variable access

Moving data
Move takes two operands: a destination operand and a source operand, and simply
moves data from the source to the destination. The destination operand can be
either a memory address (either through an immediate or using a register) or a
register. The source operand can be an immediate, register, or memory address,
but note that only one of the operands can contain a memory address, and never
both.
Move    DestinationOperand, SourceOperand

Arithmetic
    ADD, SUB, MUL, DIV, IMUL, IDIV

ADD Operand1, Operand2
SUB Operand1, Operand2   Operand1-Operand2
MUL Operand              Multoplies the unsigned operand by EAX and stores the
                         result in a 64-bit value in EDX:EAX. (means the low
                         least significant 32bits are stores in EAX and the
                         high (most significant) 32 bits are stored in EDX.

Comparing Operands
CMP
Operand1, Operand2

Conditinal Branches
Jcc     TargetCodeAddress

Function calls
CALL    FunctionAddress
The CALL instruction calls a function, and the RET instruction returns to the
caller.

Function calls are implemented using two basic instructions in assembly
language. The CALL instruction calls a function, and the RET instruction
returns to the caller. The CALL instruction pushes the current instruction
pointer onto the stack (so that it is later possible to return to the caller)
and jumps to the specified address. The function's address can be specified
just like any other operand, as an immediate, register, or memory address. The
following is the general layout of the CALL instruction.

CALL FunctionAddress

When a function completes and needs to return to its caller, it usually
invokes the RET instruction. RET pops the instruction pointer pushed to the
stack by CALL and resumes execution from that address. Additionally, RET can be
instructed to increment ESP by the specified number of bytes after popping the
instruction pointer. This is needed for restoring ESP back to its original
position as it was before the current function was called and before any
parameters were pushed onto the stack. In some calling conventions the caller
is responsible for adjusting ESP, which means that in such cases RET will be
used without any operands, and that the caller will have to manually increment
ESP by the number of bytes pushed as parameters. Detailed information on
calling conventions is available in Appendix C.

JNE and JNZ are two different mnemonics for the same instruction - they
actually share the same opcode in the machine language.


A primer on compilers and compilation
How software is created and built
book: Engineering a compiler. Keith D. Copper
      Advanced compiler design and implementation   steven s Muchnick

Defining a compiler
At its most basic level, a compiler is a program that takes one representation
of a program as its input and produces a different representation of the same
program. In most cases, the input representation is a text file containing code
that complies with the specification of a certain high-level programming
language. The output representation is usually a lower-level translation of the
same program. Such lower-level representation is usually read by hardware or
software, and rarely by people.

compiler architecture
The average compiler consists of three basic components. the front end is
responsbile for deciphering the original program text and for ensuring that its
syntax is correct and in accordance with the language's specifications. The
potimizer improves the program in one way or another, while preserving its
original meaning. Finally, the back end is reponsible for generating the
platform-specific binary from the optimized code emitted by the optimizer.

lexical analysis or scanning

When you think about it, compilers are all about representations.
Properly choosing the intermediate representation of code in a compiler is one
of the compiler designer's most important design decisions.
The layout heavily depends on what kind of source (high-level language) the
compiler takes as input, and what kind of object code the compiler spews out.
It is not uncommon for compilers to have two or more intermediate
representations, one for each stage in the compilation process.

Optimizer
Being able to perform optimizations is one of the primary reasons that
reversers should understand compilers (the other reason being to understand
code-level optimizations performed in the back end).

Optimizations that take place in the optimizer are not processor-specific and
are generic improvements made to the original program's code without any
relation to the specific platform to which the program is targeted. Regardless
of the specific optimizations that take place, optimizers must always preserve
the exact meaning of the original program and not change its behavior in any
way.

Code structure
Redundancy Elimination

Back end
code generator

Instruction selection
Register allocation
Instruction scheduling

Execution Environments
The execution environment is the component that actually runs programs. This
can be a CPU or a software environment such as a virtual machine.

Bytecodes
The interesting thing about virtual machines is that they almost always have
their own bytecode format.

Chapter 3
Windows Fundamentals

Operating system play a key role in reversing. That's because programs are
tightly integrated with operating system, and plenty of information can be
gathered by probing this interface. Moreover, the eventual bottom line of every
program is in its communication with the outside world (the program receives
user input and outputs data on the screen, writes to a file, and so on), which
means that identifying and uderstanding the bridging points between application
program and the operating system is critical.

Processes
A process is a fundamental building block in windows. A process is many things,
but it is predominantly an isolated memory address space. This address space
can be used for running a program, and address spaces are created for every
program in order to make sure that each program runs in its own address space.
Inside a process's address space the system can load code modules, but in order
to actually run a program, a process must have at least one thread running.

Threads
A thread is a primitive code execution unit. At any given moment, each
processor in the system is running one thread, which effectively means that
it's just running a piece of code; this can be either program or operating
system code, it doesn't matter. The idea with threads is that instead of
continuing to run a single piece of code until it is completed, windows can
decide to interrupt a running thread at any given moment and switch to another
thread. This process is at the very heart of windows' ability to achieve
concurrency.

Internally, a thread is nothing but a data structure that has a CONTEXT data
structure telling the system the state of the processor when the thread last
ran, combined with one or two memory blocks that are used for stack space. When
you think about it, a thread is like a little vritual processor that has its
own context and its own stack. The real physical processor swithes between
multiple virtual processors and always starts execution from the thread's
current context information and using the thread's stack.

The reason a thread can have two stacks is that in windows threads alternate
between running user-mode code and kernel-mode code.

A program's executable often gives significant hints about a program's
architecture.

Windows executable file format: the Portable Executable(PE).

Basic concepts:
Probably the most important thing to hear in mind when dealing with executable
files is that they're relocatable. This simply means that they could be loaded
at a different virtual address each time they are loaded (but they can never be
relocated after they have been loaded).

DLL Dynamically linked libraries are key feature in a windows.



Chater 4 Reversing tools
There are no all-in-one reversing tools availble. This means that you need to
create your own little toolkit that will include every type of tool that you
might possibly need.

Generally, I'd say that it's possible to start reversing without spending a
dime on software, but some of these commercial products will certainly make
your life easier.

Generally speaking, there are two fundamental reversing methodologies: offline
analysis and live analysis.


Offline Code Analysis (Dead-Listing)
Offline analysis of code means that you take a binary executable and use a
disassembler or a decompiler to convert it into a human-readable form.
Reversing is then performed by manually reading and analyzing parts of that
output. Offline code analysis is a powerful approach because it provides a good
outline of the program and makes it easy to search for specific functions that
are interest.

The downside of offline code analysis is usually that a better understanding of
the code is required because you can't see the data that the program deals with
and how it flows. You must guess what type of data the code deals with and how
it flows based on the code. Offline analysis is typically a more advanced
aprroach to reversing.

There are some cases (particularly cracking-related) where offline code
analysis is not possible. This typically happens when programs are "packed," so
that the code is encrypted or compressed and is only unpacked in runtime. In
such cases only live code analysis is possble.

Live Code Analysis
Live Analysis involves the same conversion of code into a human-readable form,
but here you don't just statically read the converted code but instead run it
in a debugger and observe its behavior on a live system.


IDA Pro
IDA (Interactive Disassembler) by DataRescue is an extremely powerful
disassembler that supports a variety of processor architectures, including
IA-32, IA-64 (Itanium), AMD64, and many others.

ILDasm

Debuggers:

OllyDbg
WinDbg
PEBrowse Professional Interactive
SoftICE

System-Monitoring Tools
System-monitoring tools is a general category of tools that observe the various
channels of I/O that exist between applications and the operating system. These
are tools such as file access monitors that display every file operation (such
as file creation, reading or writing to a file, and so on) made from every
application on the system. This is done by hooking certain low-level components
in the operating system and monitoring any relevant calls made from
applications.

inotify-tools

www.sysinternals.com

OllyDbg


Generally speaking, reversing sessions start with data - we must figure out
they key data structures that are managed by the code. 


Chapter 6
Deciphering File Formats
The general process of deciphering program data.


