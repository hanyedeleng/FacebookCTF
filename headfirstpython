lists
Modules of Functions
Errors
Data


pyenv tools switch between python 2.7 and python 3

chapter 1
create simple python lists

movies = ["The Holy Grail", "The Life of Brain", "The Meaning of Life"]

(string, comma, square brackets, assign)

Python variable identifiters don't have a type
Identifiers are simply names that refer to a data object of some type.

Lists are like arrays:
when you create a list in python, the interpreter creates an array-like data
structure in memory to hold your data, with your data items stacked from the
bottom up. the first slot in the stack is numbered 0.

movies[1]   access list data using the square bracket notation

len(cast) return the length of a list

listname.append("new element")
listname.pop()
listname.extend(["",""])
listname.remove("")
listname.insert(0, "")

listname.insert(1, 1975)   insert year

Iterate:
for each_item in lists:
    print(each_item)

count = 0
while count < len(movies):
    print(movies[count])
    count = count + 1

you can use single quotes or double quotes with string
escape \"

Names can start with a letter character or an underscore, then include any
number of letter characters, numbers, and/or underscores in the rest of the
name. Strange characters (such as %$) are not allowed and you'll obviously want
to use names that have meaning within the context of your code.

python is case sensitive

Store lists within lists
Lists can hold data of mixed type.

Check a list for a list:
Each time you process an item in your list, you need to check to see if the
item is another list.
isinstance() lets you check if a specific identifier holds data of a specific
type.

names = ['michael', 'terry']
isinstance(names, list)   true

nums_names = len(names)
isinstance(num_names, list)   false

dir(__builtins__) to see a list of the build-in stuff that comes with python.

help(input)
help(isinstance)


Don't repeat code; create a function
def -- providing a name for your function and specifying either an empty or
populated argument list within parentheses. 

def function_name (arguments):
    function code suite

Recursion to the rescure!


Chapter 2 Modules of functions
Reusable code is great, but a shareable module is better.
how to create, install, and distribute your own shareable modules.

Modules let you orgnize your code for optimal sharing
The distribution utilites let you share your modules with the world

Turn your function into a module
A module is simply a text file that contains Python code. The main reuirement
is that the name of the file needs to end in .py: the Python extension. To turn
your function into a module, save your code into an appropriately named file:

Go ahead and create a text file called nester.py that contains your function
code from the end of chapter 1.

The Python Package Index (or PyPI for short) provides a centralized repository
for third-party Python modules on the Internet. When you are ready, you'll be
PyPI to publish your module and make your code available for use by others. And
your module is ready, but for one important addition.

Comment your code
"""
comment
"""
the triple quote for multiple-line comments.

# for one line comment

import sys
sys.path()

impirt nester
or from nester import print_lol
namespace different

Data is external to your program:
Most of your programs conform to the input-process-output model: data comes in,
gets manipulated, and then is stored, displayed, printed, or transferred.


How does Python read data from a file?
It's all lines of text
The basic input mechanism in Python is line based: when read into your program
from a text file, data arrives one line at a time.

Python's open() BIF lives to interact with files. When combined with a for
statement, reading files is straightforward.

When you use the open() BIF to access your data in a file, an iterator is
created to feed the lines of data from your file to your code one line at a
time.

the_file = open('sketch.txt')
the_file.close()


******
import os
os.getcwd()
'/Users/barryp/Documents'
os.chdir('../HeadFirstPhthon/chapter3')
os.getcwd()
'/Users/barryp/HeadFirstPython/chapter3'
******

use readline() method to grab a line from the file,
data = open('sketch.txt')
print(data.readline(), end='')
data.close()

split()
each_line.split(":")
"Man: Is this the right room for an argument?"
(role, line_spoken) = each_line.split(":")

print(role, end='')
print(' said: ', end='')
print(line_spoken, end='')

.split(':', 1)
each_line.find(':')

Try the code first. Then deal with errors as they happen.
Try first, then recover

Rather than adding extra code and logic to guard against bad things happening,
Python's exception handling mechanism lets the error occur, spots that it has
happened, and then gives you an opportunity to recover.


try:
    your code (which might cause a runtime error)
except:
    your error-recovery code

It turns out that there are two types of list in Python: those that can change
(enclosed in squre brackets) and those that cannot be changed once they have
been created (enclosed in regular brackets). The latter is an immutable list,
more commonly referred to as a tuple. Think of tuples as the same as a list,
except for one thing: once created, the data they hold cannot be changed under
any circumstances. Another way to think about tuples is to consider them to be
a constant list. 


data = open('sketch.txt')
for each_line in data: 
    try:
        (role, line_spoken) = each_line.split(':', 1) print(role, end='')
        print(' said: ', end='')
        print(line_spoken, end='')
    except: 
        pass
data.close()

Now, no matter what happens when the split() method is invoked, the try
statement catches any and all exceptions and handles them by ignoring the error
with pass.

import os
if os.path.exists('sketch.txt'):
    ***
else:
    ***

As the list of errors that you have to worry about grows, the complexity of the
"add extra code and logic" solution increase to the point where it starts to
obscure the actual purpose of the program.

By using Python's exception-handling mechanism, you get to concentrate on what
your code needs to do, as opposed to worrying about what can go wrong and
writing extra code to avoid runtime errors.

Prudent use of the try statement leads to code that is easier to read, easier
to write, and --perhaps most important -- easier to fix when something goes
wrong.

Although it is great to be able to handle all runtime errors, it's probably
unwise to be too generic... you will want to know if something other than an
IOError or ValueError occurs as a result of your code executing at runtime.

You need to somehow use except in a less generic way.


If your exception-handling code is designed to deal with a specific type of
error, be sure to specify the error type on the except line. In doing so,
youill take your exception handling code from generic to specific

except IOError:

python seek() method can be used to "rewind" a file to the beginning.


Chapter 4 Saving data to files
Taking your memory-based data and storing it to disk is what persistence is all
about.

When that's done, you'll have something worth saving

.strip() removes unwanted whitespace from a string

if elif

Open your file in write mode
out = open("data.out", "w")
print("Norwegian Blues stun easily.", file=out)
out.close()

a append
w+ writing and reading

Files are left open after an exception!

If you need to handle an IPError before a file is closed, your written data
might become corrupted and there's no way of telling until after it has
happened.

finally:

No matter what, the code in the finally suite always runs.

This is a big improvement, because you're now ensuring that files are closed
properly.

Strings in Python is immutable, which means that once a string is created, it
cann't be changed.

What actually happens is that invoking the strip() method on the line_spoken
string creates a new string with leading and trailing whitespace removed. The
new string is then assigned to line_spoken, replacing the data that was
reffered to before. In effect, it is as if changed line_spoken, when you've
actally completely replaced the data it refers to.

Python's built-in memory management technology reclaims the RAM it was using
and makes it available to your program. That is unless some other Python data
object is also referring to the string.

It is conceivable that another data object is referring to the string referred
to by line_spoken. For example, let’s assume you have some code that contains
two variables that refer to the same string, namely “Flying Circus.” You then
decide that one of
the variables needs to be in all UPPERCASE, so you invoke the upper() method on
it. The Python interperter takes a copy of the string, converts it to
uppercase, and returns it to you. You can then assign the uppercase data back
to the variable that used to refer to the original data.

So Python variables don't actually contain the data sssigned to them. Python
variable contain a reference to a data object. The data object contains the
data

Immutable data types in python"
string, tuple, and all of the number types

If you try to change an immutable value, Python raises a TypeError exception.

locals() BIF returns a collection of names defines in the current scope.
if 'data' in locals():
    data.close()


When an exception is raised and handled by your except suite, the Python
interpreter passes an exception object into the suite. A small change makes
this exception object available to your code as an identifier:

except IOError as err:
    print('File error: ' + str(err))

Use with to work with files
The with statement, when used with files, can dramatically reduce the amount of
code you have to write, because it negates the need to include a finally suite
to handle the closing of a potentially opened data file.


try:
    data = open('its.txt', "w") print("It's...", file=data)
except IOError as err:
    print('File error: ' + str(err))
finally:
    if 'data' in locals():
        data.close()

== 

try:
    with open('its.txt', "w") as data:
        print("It's ...", file = data)
except IOError as err:
    print('File error: ' + str(err))

the use of "with" negates the need for the "finally" suite.

with open('man_data.txt') as mdf:
    print(mdf.readline())
!!!! Note: no need to close your file, because "with" does that for you.


Pikle your data:
Python ships with a standard library called pickle, which can save and load
almost any Python data object, including lists.

save with dump and restore with load
Using pickle is straigthforward: import the required module, then use dump() to
save your data and, some time later, load() to restore it. The only requirement
when working with pickled files is that they have to be opened in binary access
mode:

import pickle 
    ...
with open('mydata.pickle', 'wb') as mysavedata: 
    pickle.dump([1, 2, 'three'], mysavedata) 
    ...
with open('mydata.pickle', 'rb') as myrestoredata: 
    a_list = pickle.load(myrestoredata)

print(a_list)


Recall that Python, not you, is picking your data. To do so efficiently,
Python's pickle module uses a custom binary format(know as its protocol). As
you can see, viewing this format in your editor looks dicidedly weird.


chapter 5 comprehending data
To work effectively with your data, you often have to manipulate and transform
it into a common format to allow for efficient processing, sorting, and
storage.

sorted(listname)

list comprehension:
clean_mikey = [sanitize(each_t) for each_t in mikey]
There is no need to specify the use of the append() method as this action is
implied within the list comprehension.

>>> mins = [1, 2, 3]
>>> secs = [m * 60 for m in mins] >>> secs
[60, 120, 180]

If you have to perform a transformation on every item in a list, using a list
comprehension is the way to go, especially when the transformation is easily
specified on one time. List iterations can do everything that list
comprehension can, they just take more code, but iterations do provide more
flexibility should you need it.

if a not in as:

the Python set() data structure.
distances = set(james)

list vs set:

the sort() method changes the ordering of lists in-place
The sorted() BIF sorts most any data structure by providing copied sorting.
Pass reverse=True to either sort() or sorted() to arrange your data in
descending order.

To Access more than one data item from a list, use a slice. For example:
my_list[3:6]
create a set using the set() factory function.

chapter 6 Bunding code with data
It's important to match your data structure choice to your data.

Use class to define classes:
Python uses class to create objects. Every defined class has a special method
called __init__(), which allows you to control how objects are initialized.

Methods within your class are defined in much the same way as functions, that
is, using def. Here's the basic form:

In fact, not only does the __init__() method require self as its first
argument, but so deos every other method defined within your class.

Inherit from Python's built-in list
Python's class lets you create a custom class from sratch, just like you did
with your Athlete class. However, class also lets you create a class by
inheriting from any other existing class, including Python's built-in data
structure classes that provide you with list, set, and dict. Such classes are
referred to as subclasses.

What's really nice is that when you inherit from ans existing class (such as
list), you are given all of the existing functionality for free.

Sometimes writing everything from scratch is not the best design decison.


class NameList(list):
    def __init__(self, a_name):
        list.__init__([])
        self.name = a_name



